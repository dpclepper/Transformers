{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TNoTF9M2rg4tA0YF_6RJdBZKon2vRFwE","timestamp":1733714995303}],"machine_shape":"hm","gpuType":"A100","authorship_tag":"ABX9TyO8kusNIbDtNoFA5yVG5WOP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["First, made changes to original ReLU model to change activation function from ReLU --> GELU"],"metadata":{"id":"dLvmAlrBYMdH"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"dGZRKd--2Pza"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torchvision\n","import torchvision.transforms as transforms\n","from tqdm import tqdm\n","import torch.nn.functional as F\n","import numpy as np\n","import random\n","import os\n","import matplotlib.pyplot as plt\n","import itertools\n","import time\n","import math\n","import csv\n","from sklearn.model_selection import StratifiedKFold  # Import StratifiedKFol"]},{"cell_type":"code","source":["# Set random seeds for reproducibility\n","seed = 42\n","torch.manual_seed(seed)\n","np.random.seed(seed)\n","random.seed(seed)\n","\n","if torch.cuda.is_available():\n","    torch.cuda.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","\n","# Load CIFAR-10 data to compute mean and standard deviation\n","cifar10 = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transforms.ToTensor())\n","\n","mean = torch.zeros(3)\n","std = torch.zeros(3)\n","\n","for img, _ in cifar10:\n","    mean += img.mean([1, 2])\n","    std += img.std([1, 2])\n","\n","mean /= len(cifar10)\n","std /= len(cifar10)\n","\n","mean_tuple = tuple(mean.numpy())\n","std_tuple = tuple(std.numpy())\n","\n","print(mean_tuple, std_tuple)\n","\n","# Transformations for training data with advanced augmentations\n","transform_train = transforms.Compose([\n","    transforms.RandomCrop(32, padding=4),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean_tuple, std_tuple)\n","])\n","\n","# Transformations for test data\n","transform_test = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean_tuple, std_tuple)\n","])\n","\n","# Load training and test datasets\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)\n"],"metadata":{"id":"UyJGUpqb2WFB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733502031834,"user_tz":300,"elapsed":4408,"user":{"displayName":"Ananya Rana","userId":"02991734666597253802"}},"outputId":"0a391e40-2251-4cc1-80be-c0cf0515be97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","(0.49421427, 0.4851322, 0.45040995) (0.20199372, 0.19911827, 0.20113052)\n","Files already downloaded and verified\n","Files already downloaded and verified\n"]}]},{"cell_type":"code","source":["class PerformerLayer(nn.Module):\n","    def __init__(self, dim, n_heads, nb_features=256, dropout=0.1):\n","        super(PerformerLayer, self).__init__()\n","        self.dim = dim\n","        self.n_heads = n_heads\n","        self.head_dim = dim // n_heads\n","        self.nb_features = nb_features\n","\n","        assert self.head_dim * n_heads == dim, \"dim must be divisible by n_heads\"\n","\n","        # Linear projections for q, k, v\n","        self.to_q = nn.Linear(dim, dim, bias=False)\n","        self.to_k = nn.Linear(dim, dim, bias=False)\n","        self.to_v = nn.Linear(dim, dim, bias=False)\n","        self.to_out = nn.Linear(dim, dim)\n","\n","        # Dropout and LayerNorm\n","        self.dropout = nn.Dropout(dropout)\n","        self.layer_norm1 = nn.LayerNorm(dim)\n","        self.layer_norm2 = nn.LayerNorm(dim)\n","\n","        # Random projection matrix for FAVOR+\n","        self.register_buffer('projection_matrix', self.create_projection())\n","\n","    def create_projection(self):\n","        projection_matrix_shape = (self.nb_features, self.head_dim)\n","        projection_matrix = torch.randn(projection_matrix_shape)\n","        torch.nn.init.orthogonal_(projection_matrix)\n","        return projection_matrix\n","\n","    def generalized_kernel(self, data):\n","        projection = self.projection_matrix.to(data.device)\n","        data = data / math.sqrt(self.head_dim)\n","        data_dash = torch.einsum('b h s d, f d -> b h s f', data, projection)\n","        # Use GELU instead of ReLU\n","        data_prime = F.gelu(data_dash) + 1e-6\n","        return data_prime\n","\n","    def forward(self, x):\n","        residual = x\n","        x = self.layer_norm1(x)\n","\n","        batch_size, seq_length, dim = x.size()\n","\n","        # Compute queries, keys, and values\n","        q = self.to_q(x).view(batch_size, seq_length, self.n_heads, self.head_dim).transpose(1, 2)\n","        k = self.to_k(x).view(batch_size, seq_length, self.n_heads, self.head_dim).transpose(1, 2)\n","        v = self.to_v(x).view(batch_size, seq_length, self.n_heads, self.head_dim).transpose(1, 2)\n","\n","        # Apply the random feature map (FAVOR+)\n","        q_prime = self.generalized_kernel(q)\n","        k_prime = self.generalized_kernel(k)\n","\n","        # Compute attention using FAVOR+\n","        kv = torch.einsum('b h s f, b h s d -> b h f d', k_prime, v)\n","\n","        k_prime_sum = k_prime.sum(dim=2)\n","        z_denominator = torch.einsum('b h s f, b h f -> b h s', q_prime, k_prime_sum)\n","        z = 1 / z_denominator\n","\n","        out = torch.einsum('b h s f, b h f d -> b h s d', q_prime, kv)\n","        out = out * z.unsqueeze(-1)\n","\n","        # Reshape and combine heads\n","        out = out.transpose(1, 2).contiguous().view(batch_size, seq_length, dim)\n","        out = self.to_out(out)\n","        out = self.dropout(out)\n","\n","        # Residual connection and layer normalization\n","        out = residual + out\n","        out = self.layer_norm2(out)\n","\n","        return out"],"metadata":{"id":"9rLIWqwL2blv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Performer(nn.Module):\n","    def __init__(self, dim, n_heads, depth, dropout, num_classes=10, nb_features=256):\n","        super(Performer, self).__init__()\n","\n","        self.dim = dim\n","        self.nb_features = nb_features\n","\n","        # Initial convolutional layers with GELU\n","        self.conv_layers = nn.Sequential(\n","            nn.Conv2d(3, 64, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(64),\n","            nn.GELU(),\n","\n","            nn.Conv2d(64, 128, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(128),\n","            nn.GELU(),\n","\n","            nn.Conv2d(128, 256, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(256),\n","            nn.GELU(),\n","\n","            nn.MaxPool2d(2, 2),\n","        )\n","\n","        # Flattening and embedding with GELU\n","        self.embedding = nn.Sequential(\n","            nn.Flatten(),\n","            nn.Linear(256 * 16 * 16, dim),\n","            nn.GELU(),\n","            nn.Dropout(dropout),\n","        )\n","\n","        # Performer layers\n","        self.performer_layers = nn.ModuleList([\n","            PerformerLayer(dim, n_heads, nb_features=nb_features, dropout=dropout)\n","            for _ in range(depth)\n","        ])\n","\n","        # Classification head\n","        self.classifier = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.Linear(dim, num_classes)\n","        )\n","\n","    def forward(self, x):\n","        # Apply convolutional layers\n","        x = self.conv_layers(x)\n","\n","        # Embed features\n","        x = self.embedding(x).unsqueeze(1)  # Shape: (batch_size, seq_length=1, dim)\n","\n","        # Apply Performer layers\n","        for performer_layer in self.performer_layers:\n","            x = performer_layer(x)\n","\n","        # Remove sequence dimension and classify\n","        x = x.squeeze(1)\n","        x = self.classifier(x)\n","        return x\n"],"metadata":{"id":"c3wGPiDw2c8l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_model(model, trainloader, criterion, optimizer, scheduler, device, num_epochs):\n","    model.to(device)\n","    start_time = time.time()\n","\n","    for epoch in range(num_epochs):\n","        model.train()\n","        running_loss = 0.0\n","        loop = tqdm(trainloader, desc=f'Epoch [{epoch+1}/{num_epochs}]', leave=False)\n","\n","        for inputs, labels in loop:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            running_loss += loss.item()\n","            loop.set_postfix(loss=loss.item())\n","\n","        scheduler.step()\n","        print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss / len(trainloader):.4f}\")\n","\n","    training_time = time.time() - start_time\n","    print(f\"Training Time: {training_time:.2f} seconds\")\n","    return training_time"],"metadata":{"id":"amFmLQ2m2r6e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def evaluate_model(model, dataloader, device):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    start_time = time.time()\n","\n","    with torch.no_grad():\n","        loop = tqdm(dataloader, desc=\"Evaluating\", leave=False)\n","        for inputs, labels in loop:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            outputs = model(inputs)\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","    inference_time = time.time() - start_time\n","    accuracy = 100 * correct / total\n","    print(f\"Accuracy: {accuracy:.2f}%, Inference Time: {inference_time:.2f} seconds\")\n","    return accuracy, inference_time"],"metadata":{"id":"Dx8el5Ap2xea"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def validate_model(model, dataloader, criterion, device):\n","    model.eval()\n","    val_loss = 0.0\n","\n","    with torch.no_grad():\n","        for inputs, labels in dataloader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            val_loss += loss.item()\n","\n","    avg_val_loss = val_loss / len(dataloader)\n","    return avg_val_loss"],"metadata":{"id":"rMdU7zIh27ce"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_losses(train_losses, val_losses, num_epochs):\n","    epochs = range(1, num_epochs + 1)\n","    plt.figure(figsize=(10, 6))\n","    plt.plot(epochs, train_losses, label='Training Loss', linestyle='-', linewidth=2)\n","    plt.plot(epochs, val_losses, label='Validation Loss', linestyle='--', linewidth=2)\n","    plt.title('Training and Validation Loss Over Epochs')\n","    plt.xlabel('Epochs')\n","    plt.ylabel('Loss')\n","    plt.legend()\n","    plt.grid(True, alpha=0.6)\n","    plt.show()"],"metadata":{"id":"_csZWaam3BdB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_best_model(best_params, patience=10, num_epochs=100):\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","    # Extract hyperparameters\n","    lr = best_params['learning_rate'] * 0.1  # Reduced learning rate\n","    batch_size = best_params['batch_size']\n","    dim = best_params['dim']\n","    n_heads = best_params['n_heads']\n","    nb_features = best_params.get('nb_features', 256)\n","    depth = best_params['depth']\n","    dropout = best_params['dropout']\n","\n","    # Data loaders\n","    trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True)\n","    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False)\n","\n","    # Initialize model\n","    model = Performer(dim=dim, n_heads=n_heads, depth=depth, dropout=dropout, nb_features=nb_features)\n","    model.to(device)\n","\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=1e-4)\n","\n","    # Warmup + cosine schedule\n","    warmup_epochs = 5\n","    scheduler = optim.lr_scheduler.OneCycleLR(\n","        optimizer,\n","        max_lr=lr * 10,\n","        steps_per_epoch=len(trainloader),\n","        epochs=num_epochs,\n","        pct_start=warmup_epochs/num_epochs\n","    )\n","\n","    print(f\"\\nTraining with: lr={lr}, batch_size={batch_size}, dim={dim}, n_heads={n_heads}, depth={depth}\")\n","\n","    train_losses = []\n","    val_losses = []\n","    best_val_loss = float('inf')\n","    epochs_no_improve = 0\n","    start_time = time.time()\n","\n","    for epoch in range(num_epochs):\n","        model.train()\n","        running_loss = 0.0\n","        loop = tqdm(trainloader, desc=f'Epoch [{epoch+1}/{num_epochs}]', leave=False)\n","\n","        for inputs, labels in loop:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","\n","            outputs = model(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","\n","            # Gradient clipping\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n","\n","            optimizer.step()\n","            scheduler.step()\n","\n","            running_loss += loss.item()\n","            loop.set_postfix(loss=loss.item())\n","\n","        avg_train_loss = running_loss / len(trainloader)\n","        train_losses.append(avg_train_loss)\n","\n","        val_loss = validate_model(model, testloader, criterion, device)\n","        val_losses.append(val_loss)\n","\n","        print(f'Epoch {epoch+1}, Training Loss: {avg_train_loss:.4f}, Validation Loss: {val_loss:.4f}')\n","\n","        if val_loss < best_val_loss:\n","            best_val_loss = val_loss\n","            epochs_no_improve = 0\n","            torch.save(model.state_dict(), 'best_model_gelu.pth')\n","        else:\n","            epochs_no_improve += 1\n","\n","        if epochs_no_improve == patience:\n","            print(\"Early stopping!\")\n","            break\n","\n","    training_time = time.time() - start_time\n","    plot_losses(train_losses, val_losses, len(train_losses))\n","\n","    model.load_state_dict(torch.load('best_model_gelu.pth'))\n","    final_accuracy, inference_time = evaluate_model(model, testloader, device)\n","    print(f'\\nFinal Accuracy: {final_accuracy:.2f}%, Training Time: {training_time:.2f}s, Inference Time: {inference_time:.2f}s')\n","\n","    return {\n","        'final_accuracy': final_accuracy,\n","        'training_time': training_time,\n","        'best_val_loss': best_val_loss,\n","        'train_losses': train_losses,\n","        'val_losses': val_losses\n","    }"],"metadata":{"id":"9MIsnnEM3SDL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Best parameters from hyperparameter tuning of relu model\n","best_params_final = {\n","    'learning_rate': 0.0005,\n","    'batch_size': 128,\n","    'dim': 768,\n","    'dropout': 0,\n","    'n_heads': 16,\n","    'nb_features': 128,\n","    'depth': 1,\n","    'optimizer': 'Adam'\n","}\n","\n","if __name__ == '__main__':\n","    try:\n","        # Train the model with the best parameters\n","        print(\"Starting training with GELU activation...\")\n","        print(\"Device being used:\", \"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","        # Memory tracking (if using CUDA)\n","        if torch.cuda.is_available():\n","            print(f\"Initial GPU memory allocated: {torch.cuda.memory_allocated()/1024**2:.2f} MB\")\n","            print(f\"Initial GPU memory cached: {torch.cuda.memory_reserved()/1024**2:.2f} MB\")\n","\n","        training_summary = train_best_model(best_params_final, patience=10, num_epochs=100)\n","\n","        print(\"\\nTraining Summary:\")\n","        print(f\"Final Accuracy: {training_summary['final_accuracy']:.2f}%\")\n","        print(f\"Training Time: {training_summary['training_time']:.2f} seconds\")\n","        print(f\"Best Validation Loss: {training_summary['best_val_loss']:.4f}\")\n","\n","        # Final memory tracking (if using CUDA)\n","        if torch.cuda.is_available():\n","            print(f\"\\nFinal GPU memory allocated: {torch.cuda.memory_allocated()/1024**2:.2f} MB\")\n","            print(f\"Final GPU memory cached: {torch.cuda.memory_reserved()/1024**2:.2f} MB\")\n","\n","        # Save the training results\n","        results = {\n","            'accuracy': training_summary['final_accuracy'],\n","            'training_time': training_summary['training_time'],\n","            'best_val_loss': training_summary['best_val_loss'],\n","            'activation': 'GELU'\n","        }\n","\n","        # Save results to CSV\n","        csv_file = 'performer_results.csv'\n","        file_exists = os.path.isfile(csv_file)\n","\n","        with open(csv_file, mode='a', newline='') as f:\n","            writer = csv.DictWriter(f, fieldnames=results.keys())\n","            if not file_exists:\n","                writer.writeheader()\n","            writer.writerow(results)\n","\n","    except Exception as e:\n","        print(f\"An error occurred during training: {str(e)}\")\n","        raise"],"metadata":{"id":"PcVgnifH3U45","colab":{"base_uri":"https://localhost:8080/","height":1773},"executionInfo":{"status":"ok","timestamp":1733503768086,"user_tz":300,"elapsed":1736257,"user":{"displayName":"Ananya Rana","userId":"02991734666597253802"}},"outputId":"11835e78-b5c4-4cc1-c241-1d72aa96093a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting training with GELU activation...\n","Device being used: cuda\n","Initial GPU memory allocated: 828.55 MB\n","Initial GPU memory cached: 2034.00 MB\n","\n","Training with: lr=5e-05, batch_size=128, dim=768, n_heads=16, depth=1\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 1, Training Loss: 1.5334, Validation Loss: 1.1846\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 2, Training Loss: 1.2445, Validation Loss: 1.0516\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 3, Training Loss: 1.0925, Validation Loss: 0.9011\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 4, Training Loss: 0.9908, Validation Loss: 0.8526\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 5, Training Loss: 0.9053, Validation Loss: 0.7889\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 6, Training Loss: 0.8437, Validation Loss: 0.7726\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 7, Training Loss: 0.7943, Validation Loss: 0.7408\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 8, Training Loss: 0.7638, Validation Loss: 0.7144\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 9, Training Loss: 0.7323, Validation Loss: 0.7026\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 10, Training Loss: 0.7102, Validation Loss: 0.6729\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 11, Training Loss: 0.6939, Validation Loss: 0.6827\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 12, Training Loss: 0.6720, Validation Loss: 0.6427\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 13, Training Loss: 0.6512, Validation Loss: 0.6380\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 14, Training Loss: 0.6370, Validation Loss: 0.6557\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 15, Training Loss: 0.6184, Validation Loss: 0.5957\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 16, Training Loss: 0.6017, Validation Loss: 0.6193\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 17, Training Loss: 0.5904, Validation Loss: 0.5685\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 18, Training Loss: 0.5747, Validation Loss: 0.5732\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 19, Training Loss: 0.5606, Validation Loss: 0.5481\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 20, Training Loss: 0.5483, Validation Loss: 0.5571\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 21, Training Loss: 0.5306, Validation Loss: 0.5434\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 22, Training Loss: 0.5208, Validation Loss: 0.5424\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 23, Training Loss: 0.5042, Validation Loss: 0.5112\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 24, Training Loss: 0.4948, Validation Loss: 0.5210\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 25, Training Loss: 0.4789, Validation Loss: 0.5177\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 26, Training Loss: 0.4773, Validation Loss: 0.4861\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 27, Training Loss: 0.4667, Validation Loss: 0.5135\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 28, Training Loss: 0.4527, Validation Loss: 0.4828\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 29, Training Loss: 0.4468, Validation Loss: 0.4960\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 30, Training Loss: 0.4374, Validation Loss: 0.4960\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 31, Training Loss: 0.4243, Validation Loss: 0.4885\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 32, Training Loss: 0.4180, Validation Loss: 0.4586\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 33, Training Loss: 0.4070, Validation Loss: 0.4770\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 34, Training Loss: 0.4061, Validation Loss: 0.4661\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 35, Training Loss: 0.3965, Validation Loss: 0.4600\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 36, Training Loss: 0.3869, Validation Loss: 0.4559\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 37, Training Loss: 0.3771, Validation Loss: 0.4545\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 38, Training Loss: 0.3734, Validation Loss: 0.4419\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 39, Training Loss: 0.3655, Validation Loss: 0.4503\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 40, Training Loss: 0.3598, Validation Loss: 0.4509\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 41, Training Loss: 0.3481, Validation Loss: 0.4383\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 42, Training Loss: 0.3433, Validation Loss: 0.4317\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 43, Training Loss: 0.3395, Validation Loss: 0.4390\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 44, Training Loss: 0.3331, Validation Loss: 0.4329\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 45, Training Loss: 0.3215, Validation Loss: 0.4143\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 46, Training Loss: 0.3130, Validation Loss: 0.4313\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 47, Training Loss: 0.3051, Validation Loss: 0.4397\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 48, Training Loss: 0.3010, Validation Loss: 0.4327\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 49, Training Loss: 0.2930, Validation Loss: 0.4202\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 50, Training Loss: 0.2880, Validation Loss: 0.4227\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 51, Training Loss: 0.2787, Validation Loss: 0.4252\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 52, Training Loss: 0.2729, Validation Loss: 0.4149\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 53, Training Loss: 0.2620, Validation Loss: 0.4165\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 54, Training Loss: 0.2562, Validation Loss: 0.4167\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 55, Training Loss: 0.2556, Validation Loss: 0.4243\n","Early stopping!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["<ipython-input-20-4d06b875d8ce>:86: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model.load_state_dict(torch.load('best_model_gelu.pth'))\n","                                                           "]},{"output_type":"stream","name":"stdout","text":["Accuracy: 86.19%, Inference Time: 2.86 seconds\n","\n","Final Accuracy: 86.19%, Training Time: 1732.37s, Inference Time: 2.86s\n","\n","Training Summary:\n","Final Accuracy: 86.19%\n","Training Time: 1732.37 seconds\n","Best Validation Loss: 0.4143\n","\n","Final GPU memory allocated: 828.55 MB\n","Final GPU memory cached: 3594.00 MB\n"]},{"output_type":"stream","name":"stderr","text":["\r"]}]},{"cell_type":"markdown","source":[" Run 1 and Run 2 --> The first run was made using the best hyperparameters of a prior run of the ReLU model (*ReLU has since been modified and further fine-tuned) to set a baseline. However, this run saw NaN values by epoch 4 indicating numerical stabilities. What is seen above is the second run with modifications to code (gradient clipping, 5-epoch warm up period, OneCycleLR schedular and cosine annealing) structure and hyperparameters (reduced learning rate by 10x)."],"metadata":{"id":"lhbOLrkrZfn3"}},{"cell_type":"markdown","source":["Run 3 --> Based on our initial experiment showing GELU’s\n","preference for reduced learning rates, we hypothesized that a slightly less aggressive reduction (5x rather than 10x) might\n","maintain stability while potentially achieving better performance. https://colab.research.google.com/drive/1-79nBsZviCMWe2Q-WmYaI7uTJO5xftyA?usp=sharing"],"metadata":{"id":"3j9tQ_BoaRM5"}},{"cell_type":"markdown","source":["Finally, Run 4 --> Given that the 5x reduction showed decreased performance compared to 10x, we sought a middle ground by implementing\n","an 8x learning rate reduction (0.0000625). https://colab.research.google.com/drive/129TJ1MS3KU2Cue4g_QFMEnFj6ye0WM2p?usp=sharing"],"metadata":{"id":"uWk5RRFdc4Pq"}}]}